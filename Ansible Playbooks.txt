Playbooks define variables, configurations, deployment steps, assign roles, perform multiple tasks. 
Example -
	COPY / DELETE Files and Folders, 
	install packages, 
	start services.


It contains the following sections:
	> Every playbook starts with 3 hyphens ‘—‘
	> Host section – Defines the target machines on which the playbook should run. 
		This is based on the Ansible inventory file.
	> Variable section – This is optional and can declare all the variables needed in the playbook. 
		We will look at some examples as well.
	> Tasks section – This section lists out all the tasks that should be executed on the target machine. 
		It specifies the use of Modules. 
		Every task has a name which is a small description of what the task will do and will be listed while the playbook is run.

		
If we need to install and configure Tomcat it will consist of the following tasks:
	Download and Install Tomcat
	Configure Tomcat
	Start Tomcat
	
Similarly, another Example for usage of Tomcat used in the continuous delivery of DevOps, 
the tasks could be as follows:
	Stop application
	Uninstall application
	Install a new version of the WAR file.
	Start application


To run any playbook use the following command=
$ ansible-playbook <playbook.yml>

To check the playbook for syntax errors
$ ansible-playbook <playbook.yml> --syntax-check

To view hosts list
$ ansible-playbook <playbook.yml> --list-hosts

- used the file module to create the file.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Create a file
		file: path=/home/ansible/niranjan.txt state=touch

- Create a directory with the mode as 775 and owner/group as Ansible.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Create directory
		file: path=/home/ansible/niranjan state=directory mode=775 owner=ansible group=ansible

- To create multiple directories with one single task
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Create multiple directories
	  file: path={{item}} state=directory
	  with_items:
	  - '/home/ansible/vn1'
	  - '/home/ansible/vn2'
	  - '/home/ansible/vn3'
	  
- user module to create and delete users in the playbook
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Create User
		user: name=niranjan password=niranjan groups=ansible shell=/bin/bash
		
- Removing a user, remove=yes will remove the home directory and force=yes will remove the files in the directory.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Remove User
		user:
		name=niranjan state=absent remove=yes force=yes
		
- Copy content to a file using the copy module.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Copy content to file
		copy: content="Hello World Niranjan \n" dest=/home/ansible/niranjan.txt
		//copy: src=/home/ansible/niranjan.txt dest=/tmp/niranjan.txt

- replace module we can replace a word with another word. 
	---
	- hosts: webservers
	  tasks:
	  - name: Replace example
		replace:
		 path: /home/ansible/niranjan.txt
		 regexp: 'hello'
		 replace: "world"
		 
- Archive or ZIP files and Folders
	---
	- hosts: all
	  become: true
	  tasks:
	  - name: Ansible zip file example
		archive:
		 path: /home/ansible/niranjan.txt
		 dest: /home/ansible/niranjan.zip
		 format: zip
	// Multiple files
	---
	- hosts: all
	  tasks:
	  - name: Ansible zip multiple files example
	  archive:
	   path:
		- /home/ansible/niranjan1.txt
		- /home/ansible/niranjan2.txt
	   dest: /home/ansible/niranjan.zip
	   format: zip
	// zip all files in the directory.
	---
	- hosts: all
	  tasks:
	  - name: Ansible zip directory example
		archive:
		 path:
		  - /home/ansible
		 dest: /home/ansible/niranjan.zip
		 format: zip

- Working with date and timestamp. Using the system date and timestamp helps in certain status or logging purposes. The Ansible facts provide access to remote or target servers date and time. 
So we can use the debug module to print the output along with the var attribute as shown below.
	// Displays Date
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Date and Time Example in Ansible
		debug:
		 var=ansible_date_time.date
	// Displays Time
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Date and Time Example in Ansible
	  debug:
	   var=ansible_date_time.time
	// create a dynamic file based on the current date, test-file2020-07-15.log
	---	   
	- hosts: all
	  tasks:
	  - name: Ansible timestamp filename example
		command: touch test-file{{ansible_date_time.date}}.log
		
- Variables are used to store values.
	---
	- hosts: all
	  vars:
	 name: niranjan
	  tasks:
	  - name: Ansible Basic Variable Example
		debug:
		 msg: "{{ name }}"
	// Multiple variables
	---
	- hosts: all
	  vars:
	 name:
	   - Vasudevamurthy
	   - Niranjan
	 tasks:
	 - name: Ansible Array Example
	   debug:
		msg: "{{ name[1] }}"

- Register Variables. Note: To display – use the msg attribute and to capture any value use the var attribute in the – debug module
	---
	- hosts: all
	  tasks:
	  - name: Ansible register variable basic example
		shell: "find *.txt"
		args:
		 chdir: "/home/Ansible"
		register: reg_output
	  - debug:
		 var: reg_output
==========================================================================
- Playbook to install vim editor and GIT on the target servers or machines.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Install Package
		yum: name=vim,git state=latest

- Install Apache server. Save the below code and run playbook as shown below.
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Install Package
		yum: name=httpd state=present
	  - name: Start httpd service
		 service: name=httpd state=started
		 
- Install JDK
	---
	- hosts: webservers
	  become: true
	  vars:
	   download_url: http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.rpm
	  
	  tasks:
	  - name: Download JDK 8 RPM file
		command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{download_url}} "
	  - name: Install JDK 8
		command: "rpm -ivh jdk-8u171-linux-x64.rpm"
		
- Install Maven
	---
	- hosts: webservers
	  become: true
	  tasks:
	  - name: Download Maven
		get_url: url=http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz dest=/opt/niranjan/apache-maven-3.5.3-bin.tar.gz
	  - name: Extract Maven
		command: tar xvf /opt/niranjan/apache-maven-3.5.3-bin.tar.gz -C /opt/niranjan
	  - name: Move to a smaller directory
		command: mv /opt/niranjan/apache-maven-3.5.3 /opt/niranjan/maven
	  - name: Update Profile
		copy: content="export M2_HOME=/opt/niranjan/maven \n" dest=/etc/profile.d/maven.sh
	  # lineinfile is used to add additional or append lines to existing files.
	  - lineinfile:
		 path: /etc/profile.d/maven.sh
	  line: 'export PATH=${M2_HOME}/bin:${PATH}'
	  - name: Source profile
		shell: source /etc/profile.d/maven.sh
		
- Install Tomcat 8, downloadble link - https://tomcat.apache.org/download-80.cgi
	---
	- hosts: webservers
	  become: true
	  gather_facts: no
	  tasks:
	  - name: Download Tomcat
		get_url: url=https://downloads.apache.org/tomcat/tomcat-8/v8.5.59/bin/apache-tomcat-8.5.59.tar.gz dest=/home/ansible

	  - name: Extract the file downloaded tomcat file
		command: tar xvf apache-tomcat-8.5.32.tar.gz
	 
	  - name: Move the Tomcat directory to a smaller one
		command: mv apache-tomcat-8.5.32 tomcat
	  
	  - name: Change Ownership and group of the Tomcat directory
		file: path=/home/ansible/tomcat owner=ansible group=ansible mode=775 state=directory recurse=yes
	 
	  - name: Start Tomcat
		command: nohup /home/ansible/tomcat/bin/startup.sh # Execute command even after you have exited from the shell prompt
		become: true
		become_user: ansible
		
======================================================================================
- pre_tasks, post_tasks, and tags (pre_tasks and post_tasks to run certain tasks before or after running the main task)